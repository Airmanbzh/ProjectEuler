package com.airmanbzh.euler;

import java.util.*;

public class Project {

    /**
     * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
     * The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000
     */
    public static Integer ex1(Integer n) {
        Integer sum = 0;

        if (n > 0) {
            for (Integer i = 0; i < n; i++) {
                if (i % 3 == 0 || i % 5 == 0) {
                    sum += i;
                }
            }
        }

        return sum;
    }

    /**
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     * <p>
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
     */
    public static Integer ex2(Integer max) {
        Integer sum = 0;
        Integer lastPrev = 0;
        Integer prev = 1;
        Integer currentValue = 1;
        Integer i = 0;

        while (currentValue <= max) {
            if (currentValue % 2 == 0) {
                sum += currentValue;
            }

            currentValue = lastPrev + prev;

            lastPrev = prev;
            prev = currentValue;

            i++;
        }

        return sum;
    }


    public static List<Long> primes = new ArrayList<Long>();
    public static Long lastNotPrime = 1L;

    /**
     * The prime factors of 13195 are 5, 7, 13 and 29.
     * What is the largest prime factor of the number 600851475143 ?
     */
    public static Long ex3(Long number) {

        Long result = 0L;

        List<Long> listResults = getPrimeNumbers(number);

        if (listResults.size() > 0) {
            result = Collections.max(listResults);
        }

        return result;
    }

    private static List<Long> getPrimeNumbers(Long number) {
        List<Long> listResults = new ArrayList<Long>();
        Integer lastIndex = 0;

        if (number > 1) {
            if (primes.contains(number)) {
                listResults.add(number);
                return listResults;
            }

            while (!primes.contains(number) && number >= 2) {
                Long lastNumber = Math.max(primes.size() > 0 ? primes.get(primes.size() - 1) : 0, lastNotPrime) + 1;

                if (isPrime(lastNumber)) {
                    primes.add(lastNumber);
                } else {
                    lastNotPrime = lastNumber;
                }

                for (Integer i = lastIndex; i < primes.size(); i++) {
                    if (number % primes.get(i) == 0) {
                        number = number / primes.get(i);

                        listResults.add(primes.get(i));
                    }
                }
            }

            if (primes.contains(number)) {
                listResults.add(number);
            }
        }

        return listResults;
    }

    /**
     * Test if a number is divisible by one the known prime numbers
     *
     * @param number
     * @return Boolean
     */
    public static Boolean isPrime(Long number) {
        if (number < 2) {
            return false;
        }

        Integer i = 0;
        while (i < primes.size() && number % primes.get(i) != 0) {
            i++;
        }

        return i.equals(primes.size());
    }

    /**
     * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
     * Find the largest palindrome made from the product of two 3-digit numbers.
     */
    public static Long ex4(Integer numberOfDigit) {
        Long result = 0L;

        if (numberOfDigit > 0) {
            Long maxNumber = (long) (Math.pow(10, numberOfDigit) - 1);
            Long minNumber = (long) (Math.pow(10, numberOfDigit - 1));

            List<Long> palindromeList = new ArrayList<Long>();

            for (Long i = maxNumber; i >= minNumber; i--) {
                for (Long j = i; j >= minNumber; j--) {
                    Long mult = i * j;

                    if (mult.toString().equals((new StringBuilder(mult.toString())).reverse().toString())) {
                        palindromeList.add(mult);
                    }
                }
            }

            if (palindromeList.size() > 0) {
                result = Collections.max(palindromeList);
            }
        }

        return result;
    }

    /**
     * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
     *
     * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
     *
     * @param max
     *
     * @return
     */
    public static Long ex5(Integer max) {
        HashMap<Long, Integer> primeMap = new HashMap<Long, Integer>();
        Long result = 1L;

        for (Integer i = 2; i <= max; i++) {
            HashMap<Long, Integer> subMap = new HashMap<Long, Integer>();
            List<Long> primeNumbers = getPrimeNumbers((long)i);

            for (Long primeNumber : primeNumbers) {
                subMap.put(primeNumber, subMap.containsKey(primeNumber) ? subMap.get(primeNumber) + 1 : 1);
            }

            for (Long key : subMap.keySet()) {
                if (!primeMap.containsKey(key)) {
                    primeMap.put(key, 0);
                }

                primeMap.put(key, Math.max(primeMap.get(key), subMap.get(key)));
            }
        }

        for (Long key : primeMap.keySet()) {
            result *= (long) Math.pow(key, primeMap.get(key));
        }

        return result;
    }

    /**
     * The sum of the squares of the first ten natural numbers is,
     *      12 + 22 + ... + 102 = 385
     *
     * The square of the sum of the first ten natural numbers is,
     *      (1 + 2 + ... + 10)2 = 552 = 3025
     *
     * Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
     * Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
     *
     * @param number
     *
     * @return
     */
    public static Long ex6(Integer number) {
        Long sum = 0L;
        Long squarredSum = 0L;

        for (Integer i=1; i <= number; i++) {
            sum += i;
            squarredSum += (long) Math.pow(i, 2);
        }

        return (long)Math.pow(sum, 2) - squarredSum;
    }

    /**
     * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
     *
     * What is the 10 001st prime number?
     *
     * @param primeNumberIndex
     * @return
     */
    public static Long ex7(Integer primeNumberIndex) {
        Long lastNotPrime = 0L;
        while (primes.size() <= primeNumberIndex - 1) {
            Long lastNumber = Math.max(primes.size() > 0 ? primes.get(primes.size() - 1) : 0, lastNotPrime) + 1;

            if (isPrime(lastNumber)) {
                primes.add(lastNumber);
            } else {
                lastNotPrime = lastNumber;
            }
        }

        return primes.size() > 0 ? primes.get(primes.size() - 1) : 0;
    }
}
